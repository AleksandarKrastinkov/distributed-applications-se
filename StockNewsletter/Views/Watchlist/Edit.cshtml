@model StockNewsletter.Models.WatchList
@{
    ViewData["Title"] = "Edit Watchlist Item";
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">@ViewData["Title"]</h3>
            </div>
            <div class="card-body">
                <form asp-action="Edit" method="post" id="editForm">
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="UserId" />
                    <input type="hidden" asp-for="DateAdded" />
                    
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    
                    <!-- Debug info -->
                    <div id="debugInfo" class="alert alert-info" style="display: none;">
                        <small>Debug: Form validation and submission status will appear here</small>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label asp-for="StockSymbol" class="control-label">Search and Select Stock</label>
                        <div class="position-relative">
                            <input type="text" 
                                   id="stockSearch" 
                                   class="form-control" 
                                   placeholder="Type to search stocks (e.g., 'AAPL' or 'Apple Inc')..." 
                                   autocomplete="off"
                                   value="@Model.StockSymbol" />
                            <input type="hidden" asp-for="StockSymbol" id="selectedStock" value="@Model.StockSymbol" />
                            <div id="stockDropdown" class="dropdown-menu w-100" style="max-height: 300px; overflow-y: auto; display: none;">
                                <!-- Options will be populated here -->
                            </div>
                        </div>
                        <span asp-validation-for="StockSymbol" class="text-danger"></span>
                        <small class="form-text text-muted">
                            <i class="fas fa-search"></i> Type stock symbol or company name to search
                        </small>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label asp-for="Notes" class="control-label">Notes (Optional)</label>
                        <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Add any notes about this stock..."></textarea>
                        <span asp-validation-for="Notes" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <small class="text-muted">
                            <strong>Added:</strong> @Model.DateAdded.ToString("MMM dd, yyyy 'at' hh:mm tt")
                        </small>
                    </div>
                    
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <a class="btn btn-secondary me-md-2" asp-action="Index">
                            <i class="fas fa-arrow-left"></i> Back to Watchlist
                        </a>
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            <i class="fas fa-save"></i> Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <style>
        .dropdown-menu {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            z-index: 1000;
            min-width: 100%;
            padding: 0.5rem 0;
            margin: 0;
            background-color: #fff;
            border: 1px solid rgba(0,0,0,.15);
            border-radius: 0.375rem;
            box-shadow: 0 0.5rem 1rem rgba(0,0,0,.175);
        }
        
        .dropdown-item {
            display: block;
            width: 100%;
            padding: 0.5rem 1rem;
            clear: both;
            font-weight: 400;
            color: #212529;
            text-align: inherit;
            text-decoration: none;
            white-space: nowrap;
            background-color: transparent;
            border: 0;
            cursor: pointer;
        }
        
        .dropdown-item:hover, .dropdown-item:focus {
            color: #1e2125;
            background-color: #e9ecef;
        }
        
        .dropdown-item.active {
            color: #fff;
            background-color: #0d6efd;
        }
        
        .stock-symbol {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            color: #0d6efd;
        }
        
        .stock-name {
            color: #6c757d;
            font-size: 0.9em;
        }
        
        .card {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: none;
        }
        
        .card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }
    </style>
    
    <script>
        $(document).ready(function() {
            let stockOptions = [];
            let selectedStockSymbol = '@Model.StockSymbol';
            
            // Debug function
            function debug(message) {
                console.log('Debug:', message);
                $('#debugInfo').show().find('small').text('Debug: ' + message);
            }
            
            // Load stock options
            async function loadStockOptions() {
                try {
                    debug('Loading stock options...');
                    
                    // Show this came from ViewBag
                    const viewBagOptions = @Html.Raw(Json.Serialize(ViewBag.StockOptions ?? new List<object>()));
                    
                    if (viewBagOptions && viewBagOptions.length > 0) {
                        stockOptions = viewBagOptions.filter(option => option.value && option.value !== '');
                        debug(`Loaded ${stockOptions.length} stock options`);
                    } else {
                        debug('No stock options loaded from server');
                        stockOptions = [];
                    }
                } catch (error) {
                    debug('Error loading stock options: ' + error.message);
                    stockOptions = [];
                }
            }
            
            // Filter and display options
            function filterOptions(searchTerm) {
                const filtered = stockOptions.filter(option => {
                    const text = option.text.toLowerCase();
                    const value = option.value.toLowerCase();
                    const search = searchTerm.toLowerCase();
                    return text.includes(search) || value.includes(search);
                });
                
                displayOptions(filtered.slice(0, 50)); // Limit to 50 results for performance
            }
            
            // Display options in dropdown
            function displayOptions(options) {
                const dropdown = $('#stockDropdown');
                dropdown.empty();
                
                if (options.length === 0) {
                    dropdown.append('<div class="dropdown-item text-muted">No stocks found</div>');
                } else {
                    options.forEach(option => {
                        const parts = option.text.split(' - ');
                        const symbol = parts[0];
                        const name = parts.length > 1 ? parts[1] : '';
                        
                        const item = $(`
                            <div class="dropdown-item" data-value="${option.value}">
                                <div class="stock-symbol">${symbol}</div>
                                ${name ? `<div class="stock-name">${name}</div>` : ''}
                            </div>
                        `);
                        
                        dropdown.append(item);
                    });
                }
                
                dropdown.show();
            }
            
            // Initialize
            loadStockOptions();
            
            // Search input events
            $('#stockSearch').on('input', function() {
                const searchTerm = $(this).val().trim();
                if (searchTerm.length >= 1) {
                    filterOptions(searchTerm);
                } else {
                    $('#stockDropdown').hide();
                }
                
                // Update selected stock if user is typing
                if ($(this).val().trim() !== selectedStockSymbol) {
                    $('#selectedStock').val($(this).val().trim());
                }
            });
            
            // Handle dropdown item selection
            $(document).on('click', '#stockDropdown .dropdown-item', function() {
                if (!$(this).data('value')) return;
                
                selectedStockSymbol = $(this).data('value');
                const displayText = $(this).find('.stock-symbol').text();
                
                $('#stockSearch').val(displayText);
                $('#selectedStock').val(selectedStockSymbol);
                $('#stockDropdown').hide();
                
                debug(`Selected stock: ${selectedStockSymbol}`);
            });
            
            // Hide dropdown when clicking outside
            $(document).on('click', function(e) {
                if (!$(e.target).closest('.position-relative').length) {
                    $('#stockDropdown').hide();
                }
            });
            
            // Form submission
            $('#editForm').on('submit', function(e) {
                e.preventDefault();
                
                debug('Form submission started');
                
                const stockSymbol = $('#selectedStock').val();
                const notes = $('#Notes').val();
                
                debug(`Stock Symbol: "${stockSymbol}", Notes: "${notes}"`);
                
                if (!stockSymbol || stockSymbol.trim() === '') {
                    alert('Please search and select a stock from the dropdown.');
                    debug('Validation failed: No stock selected');
                    return false;
                }
                
                // Show loading state
                $('#submitBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Saving...');
                $('.card-body').addClass('loading');
                
                debug('Submitting form...');
                
                // Submit the form
                this.submit();
            });
            
            // Focus events
            $('#stockSearch').on('focus', function() {
                if (stockOptions.length > 0 && $(this).val().trim().length >= 1) {
                    filterOptions($(this).val().trim());
                }
            });
        });
    </script>
} 